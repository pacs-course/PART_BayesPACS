// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace StanModel_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "StanModel.stan");
    reader.add_event(46, 46, "end", "StanModel.stan");
    return reader;
}

class StanModel_model : public prob_grad {
private:
    int N;
    int Q;
    vector<int> Y;
    matrix_d X;
    vector_d f;
    matrix_d L0;
    int L1;
    vector_d m0;
    int m1;
public:
    StanModel_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    StanModel_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "StanModel_model_namespace::StanModel_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Q", "int", context__.to_vec());
        Q = int(0);
        vals_i__ = context__.vals_i("Q");
        pos__ = 0;
        Q = vals_i__[pos__++];
        validate_non_negative_index("Y", "N", N);
        context__.validate_dims("data initialization", "Y", "int", context__.to_vec(N));
        validate_non_negative_index("Y", "N", N);
        Y = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("Y");
        pos__ = 0;
        size_t Y_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < Y_limit_0__; ++i_0__) {
            Y[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("X", "Q", Q);
        validate_non_negative_index("X", "N", N);
        context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(Q,N));
        validate_non_negative_index("X", "Q", Q);
        validate_non_negative_index("X", "N", N);
        X = matrix_d(static_cast<Eigen::VectorXd::Index>(Q),static_cast<Eigen::VectorXd::Index>(N));
        vals_r__ = context__.vals_r("X");
        pos__ = 0;
        size_t X_m_mat_lim__ = Q;
        size_t X_n_mat_lim__ = N;
        for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                X(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("f", "N", N);
        context__.validate_dims("data initialization", "f", "vector_d", context__.to_vec(N));
        validate_non_negative_index("f", "N", N);
        f = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        vals_r__ = context__.vals_r("f");
        pos__ = 0;
        size_t f_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < f_i_vec_lim__; ++i_vec__) {
            f[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("L0", "Q", Q);
        validate_non_negative_index("L0", "Q", Q);
        context__.validate_dims("data initialization", "L0", "matrix_d", context__.to_vec(Q,Q));
        validate_non_negative_index("L0", "Q", Q);
        validate_non_negative_index("L0", "Q", Q);
        L0 = matrix_d(static_cast<Eigen::VectorXd::Index>(Q),static_cast<Eigen::VectorXd::Index>(Q));
        vals_r__ = context__.vals_r("L0");
        pos__ = 0;
        size_t L0_m_mat_lim__ = Q;
        size_t L0_n_mat_lim__ = Q;
        for (size_t n_mat__ = 0; n_mat__ < L0_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < L0_m_mat_lim__; ++m_mat__) {
                L0(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "L1", "int", context__.to_vec());
        L1 = int(0);
        vals_i__ = context__.vals_i("L1");
        pos__ = 0;
        L1 = vals_i__[pos__++];
        validate_non_negative_index("m0", "Q", Q);
        context__.validate_dims("data initialization", "m0", "vector_d", context__.to_vec(Q));
        validate_non_negative_index("m0", "Q", Q);
        m0 = vector_d(static_cast<Eigen::VectorXd::Index>(Q));
        vals_r__ = context__.vals_r("m0");
        pos__ = 0;
        size_t m0_i_vec_lim__ = Q;
        for (size_t i_vec__ = 0; i_vec__ < m0_i_vec_lim__; ++i_vec__) {
            m0[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "m1", "int", context__.to_vec());
        m1 = int(0);
        vals_i__ = context__.vals_i("m1");
        pos__ = 0;
        m1 = vals_i__[pos__++];

        // validate, data variables
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"Q",Q,0);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"Y[k0__]",Y[k0__],0);
            check_less_or_equal(function__,"Y[k0__]",Y[k0__],1);
        }
        check_greater_or_equal(function__,"L1",L1,0);
        check_greater_or_equal(function__,"m1",m1,0);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        validate_non_negative_index("beta", "Q", Q);
        num_params_r__ += Q;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
    }

    ~StanModel_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "Q", Q);
        context__.validate_dims("initialization", "beta", "row_vector_d", context__.to_vec(Q));
        // generate_declaration beta
        row_vector_d beta(static_cast<Eigen::VectorXd::Index>(Q));
        for (int j1__ = 0U; j1__ < Q; ++j1__)
            beta(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_unconstrain(beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        context__.validate_dims("initialization", "alpha", "double", context__.to_vec());
        // generate_declaration alpha
        double alpha(0);
        alpha = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(alpha);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha: ") + e.what());
        }

        if (!(context__.contains_r("mu")))
            throw std::runtime_error("variable mu missing");
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu", "double", context__.to_vec());
        // generate_declaration mu
        double mu(0);
        mu = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau", "double", context__.to_vec());
        // generate_declaration tau
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,tau);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        if (!(context__.contains_r("eta")))
            throw std::runtime_error("variable eta missing");
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        context__.validate_dims("initialization", "eta", "double", context__.to_vec());
        // generate_declaration eta
        double eta(0);
        eta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,eta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable eta: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,1,Eigen::Dynamic>  beta;
        (void) beta;  // dummy to suppress unused var warning
        if (jacobian__)
            beta = in__.row_vector_constrain(Q,lp__);
        else
            beta = in__.row_vector_constrain(Q);

        T__ alpha;
        (void) alpha;  // dummy to suppress unused var warning
        if (jacobian__)
            alpha = in__.scalar_constrain(lp__);
        else
            alpha = in__.scalar_constrain();

        T__ mu;
        (void) mu;  // dummy to suppress unused var warning
        if (jacobian__)
            mu = in__.scalar_constrain(lp__);
        else
            mu = in__.scalar_constrain();

        T__ tau;
        (void) tau;  // dummy to suppress unused var warning
        if (jacobian__)
            tau = in__.scalar_lb_constrain(0,lp__);
        else
            tau = in__.scalar_lb_constrain(0);

        T__ eta;
        (void) eta;  // dummy to suppress unused var warning
        if (jacobian__)
            eta = in__.scalar_lb_constrain(0,lp__);
        else
            eta = in__.scalar_lb_constrain(0);


        // transformed parameters


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            current_statement_begin__ = 30;
            for (int i = 1; i <= N; ++i) {

                current_statement_begin__ = 31;
                lp_accum__.add(bernoulli_logit_log(Y,((multiply(beta,stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "X")) + (alpha * get_base1(f,i,"f",1))) + mu)));
            }
            current_statement_begin__ = 38;
            lp_accum__.add(normal_log<propto__>(mu, 0, sqrt(100)));
            current_statement_begin__ = 39;
            lp_accum__.add(multi_normal_log<propto__>(beta, m0, multiply(inv_sqrt(tau),L0)));
            current_statement_begin__ = 40;
            lp_accum__.add(normal_log<propto__>(alpha, m1, (inv_sqrt(eta) * L1)));
            current_statement_begin__ = 41;
            lp_accum__.add(gamma_log<propto__>(tau, 0.01, 0.01));
            current_statement_begin__ = 42;
            lp_accum__.add(gamma_log<propto__>(eta, 0.01, 0.01));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("alpha");
        names__.push_back("mu");
        names__.push_back("tau");
        names__.push_back("eta");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "StanModel_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        row_vector_d beta = in__.row_vector_constrain(Q);
        double alpha = in__.scalar_constrain();
        double mu = in__.scalar_constrain();
        double tau = in__.scalar_lb_constrain(0);
        double eta = in__.scalar_lb_constrain(0);
        for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(beta[k_0__]);
        }
        vars__.push_back(alpha);
        vars__.push_back(mu);
        vars__.push_back(tau);
        vars__.push_back(eta);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning



        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "StanModel_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "eta";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "eta";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }

}; // model

}

typedef StanModel_model_namespace::StanModel_model stan_model;

